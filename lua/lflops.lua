---@class LFlops
---@field config LFlopsConfig
---@field palette LFlopsPalette
local LFlops = {}

---@alias Contrast "hard" | "soft" | ""

---@class ItalicConfig
---@field strings boolean
---@field comments boolean
---@field operators boolean
---@field folds boolean
---@field emphasis boolean

---@class HighlightDefinition
---@field fg string?
---@field bg string?
---@field sp string?
---@field blend integer?
---@field bold boolean?
---@field standout boolean?
---@field underline boolean?
---@field undercurl boolean?
---@field underdouble boolean?
---@field underdotted boolean?
---@field strikethrough boolean?
---@field italic boolean?
---@field reverse boolean?
---@field nocombine boolean?

---@class LFlopsConfig
---@field terminal_colors boolean?
---@field undercurl boolean?
---@field underline boolean?
---@field bold boolean?
---@field italic ItalicConfig?
---@field strikethrough boolean?
---@field contrast Contrast?
---@field invert_selection boolean?
---@field invert_signs boolean?
---@field invert_tabline boolean?
---@field invert_intend_guides boolean?
---@field inverse boolean?
---@field overrides table<string, HighlightDefinition>?
---@field palette_overrides table<string, string>?
LFlops.config = {
  terminal_colors = true,
  undercurl = true,
  underline = true,
  bold = true,
  italic = {
    strings = true,
    emphasis = true,
    comments = true,
    operators = false,
    folds = true,
  },
  strikethrough = true,
  invert_selection = false,
  invert_signs = false,
  invert_tabline = false,
  invert_intend_guides = false,
  inverse = true,
  contrast = '',
  palette_overrides = {},
  overrides = {},
  dim_inactive = false,
  transparent_mode = false,
}

-- [0]  = "#373b41" /* black   */
-- [1]  = "#ff5682" /* red     */
-- [2] = "#7fd06e" /* green   */
-- [3] = "#ffd982" /* yellow  */
-- [4] = "#00dbea" /* blue    */
-- [5] = "#9b8fcb" /* magenta */
-- [6] = "#f771be" /* cyan    */
-- [7] = "#b8b8ba" /* white   */
-- [8] = "#282a2e" /* black   */
-- [9] = "#c24163" /* red     */
-- [10] = "#6eb35f" /* green   */
-- [11] = "#c3a664" /* yellow  */
-- [12] = "#00919b" /* blue    */
-- [13] = "#9372af" /* magenta */
-- [14] = "#ca5c9c" /* cyan    */
-- [15] = "#485890" /* white   */
-- [256] = "#333333", /* background */
-- [257] = "#d2cdf4", /* foreground */

-- main lflops color palette
---@class LFlopsPalette
LFlops.palette = {
  dark0_hard = '#333333',
  dark0 = '#333333',
  dark0_soft = '#32302f',
  dark1 = '#333333',
  dark2 = '#504945',
  dark3 = '#665c54',
  dark4 = '#7c6f64',
  light0_hard = '#d2cdf4',
  light0 = '#d2cdf4',
  light0_soft = '#d2cdf4',
  light1 = '#d2cdf4',
  light2 = '#d2cdf4',
  light3 = '#d2cdf4',
  light4 = '#d2cdf4',
  bright_red = '#ff5682',
  bright_green = '#7fd06e',
  bright_yellow = '#ffd982',
  bright_blue = '#00dbea',
  bright_purple = '#9b8fcb',
  bright_pink = '#f771be',
  bright_orange = '#c3a664',
  neutral_red = '#ff5682',
  neutral_green = '#6eb35f',
  neutral_yellow = '#c3a664',
  neutral_blue = '#00919b',
  neutral_purple = '#9372af',
  neutral_aqua = '#6eb35f',
  neutral_orange = '#c3a664',
  dark_red_hard = '#c24163',
  dark_red = '#c24163',
  dark_red_soft = '#c24163',
  dark_green_hard = '#5a633a',
  dark_green = '#62693e',
  dark_green_soft = '#686d43',
  dark_aqua_hard = '#3e4934',
  dark_aqua = '#49503b',
  dark_aqua_soft = '#525742',
  dark_blue = '#485890',
}

-- get a hex list of lflops colors based on current bg and constrast config
local function get_colors()
  local p = LFlops.palette
  local config = LFlops.config

  for color, hex in pairs(config.palette_overrides) do
    p[color] = hex
  end

  local bg = vim.o.background
  local contrast = config.contrast

  local color_groups = {
    dark = {
      bg0 = p.dark0,
      bg1 = p.dark1,
      bg2 = p.dark2,
      bg3 = p.dark3,
      bg4 = p.dark4,
      fg0 = p.light0,
      fg1 = p.light1,
      fg2 = p.light2,
      fg3 = p.light3,
      fg4 = p.light4,
      red = p.bright_red,
      green = p.bright_green,
      yellow = p.bright_yellow,
      blue = p.bright_blue,
      purple = p.bright_purple,
      aqua = p.bright_pink,
      orange = p.bright_orange,
      neutral_red = p.neutral_red,
      neutral_green = p.neutral_green,
      neutral_yellow = p.neutral_yellow,
      neutral_blue = p.neutral_blue,
      neutral_purple = p.neutral_purple,
      neutral_aqua = p.neutral_aqua,
      dark_red = p.dark_red,
      dark_green = p.dark_green,
      dark_aqua = p.dark_aqua,
      dark_blue = p.dark_blue,
    },
  }

  if contrast ~= nil and contrast ~= '' then
    color_groups[bg].bg0 = p[bg .. '0_' .. contrast]
    color_groups[bg].dark_red = p[bg .. '_red_' .. contrast]
    color_groups[bg].dark_green = p[bg .. '_green_' .. contrast]
    color_groups[bg].dark_aqua = p[bg .. '_aqua_' .. contrast]
  end

  return color_groups[bg]
end

local function get_groups()
  local colors = get_colors()
  local config = LFlops.config

  if config.terminal_colors then
    local term_colors = {
      colors.bg0,
      colors.neutral_red,
      colors.neutral_green,
      colors.neutral_yellow,
      colors.neutral_blue,
      colors.neutral_purple,
      colors.neutral_aqua,
      colors.fg4,
      colors.dark_blue,
      colors.red,
      colors.green,
      colors.yellow,
      colors.blue,
      colors.purple,
      colors.aqua,
      colors.fg1,
    }
    for index, value in ipairs(term_colors) do
      vim.g['terminal_color_' .. index - 1] = value
    end
  end

  local groups = {
    LFlopsFg0 = { fg = colors.fg0 },
    LFlopsFg1 = { fg = colors.fg1 },
    LFlopsFg2 = { fg = colors.fg2 },
    LFlopsFg3 = { fg = colors.fg3 },
    LFlopsFg4 = { fg = colors.fg4 },
    LFlopsGray = { fg = colors.dark_blue },
    LFlopsBg0 = { fg = colors.bg0 },
    LFlopsBg1 = { fg = colors.bg1 },
    LFlopsBg2 = { fg = colors.bg2 },
    LFlopsBg3 = { fg = colors.bg3 },
    LFlopsBg4 = { fg = colors.bg4 },
    LFlopsRed = { fg = colors.red },
    LFlopsRedBold = { fg = colors.red, bold = config.bold },
    LFlopsGreen = { fg = colors.green },
    LFlopsGreenBold = { fg = colors.green, bold = config.bold },
    LFlopsYellow = { fg = colors.yellow },
    LFlopsYellowBold = { fg = colors.yellow, bold = config.bold },
    LFlopsBlue = { fg = colors.blue },
    LFlopsBlueBold = { fg = colors.blue, bold = config.bold },
    LFlopsPurple = { fg = colors.purple },
    LFlopsPurpleBold = { fg = colors.purple, bold = config.bold },
    LFlopsAqua = { fg = colors.aqua },
    LFlopsAquaBold = { fg = colors.aqua, bold = config.bold },
    LFlopsOrange = { fg = colors.orange },
    LFlopsOrangeBold = { fg = colors.orange, bold = config.bold },
    LFlopsRedSign = config.transparent_mode and { fg = colors.red, reverse = config.invert_signs }
        or { fg = colors.red, bg = colors.bg1, reverse = config.invert_signs },
    LFlopsGreenSign = config.transparent_mode and { fg = colors.green, reverse = config.invert_signs }
        or { fg = colors.green, bg = colors.bg1, reverse = config.invert_signs },
    LFlopsYellowSign = config.transparent_mode and { fg = colors.yellow, reverse = config.invert_signs }
        or { fg = colors.yellow, bg = colors.bg1, reverse = config.invert_signs },
    LFlopsBlueSign = config.transparent_mode and { fg = colors.blue, reverse = config.invert_signs }
        or { fg = colors.blue, bg = colors.bg1, reverse = config.invert_signs },
    LFlopsPurpleSign = config.transparent_mode and { fg = colors.purple, reverse = config.invert_signs }
        or { fg = colors.purple, bg = colors.bg1, reverse = config.invert_signs },
    LFlopsAquaSign = config.transparent_mode and { fg = colors.aqua, reverse = config.invert_signs }
        or { fg = colors.aqua, bg = colors.bg1, reverse = config.invert_signs },
    LFlopsOrangeSign = config.transparent_mode and { fg = colors.orange, reverse = config.invert_signs }
        or { fg = colors.orange, bg = colors.bg1, reverse = config.invert_signs },
    LFlopsRedUnderline = { undercurl = config.undercurl, sp = colors.red },
    LFlopsGreenUnderline = { undercurl = config.undercurl, sp = colors.green },
    LFlopsYellowUnderline = { undercurl = config.undercurl, sp = colors.yellow },
    LFlopsBlueUnderline = { undercurl = config.undercurl, sp = colors.blue },
    LFlopsPurpleUnderline = { undercurl = config.undercurl, sp = colors.purple },
    LFlopsAquaUnderline = { undercurl = config.undercurl, sp = colors.aqua },
    LFlopsOrangeUnderline = { undercurl = config.undercurl, sp = colors.orange },
    Normal = config.transparent_mode and { fg = colors.fg1, bg = nil } or { fg = colors.fg1, bg = colors.bg0 },
    NormalFloat = config.transparent_mode and { fg = colors.fg1, bg = nil } or { fg = colors.fg1, bg = colors.bg1 },
    FloatBorder = config.transparent_mode and { fg = colors.orange, bg = nil }
        or { fg = colors.orange, bg = colors.bg1 },
    NormalNC = config.dim_inactive and { fg = colors.fg0, bg = colors.bg1 } or { link = 'Normal' },
    CursorLine = { bg = colors.bg1 },
    CursorColumn = { link = 'CursorLine' },
    TabLineFill = { fg = colors.bg4, bg = colors.bg1, reverse = config.invert_tabline },
    TabLineSel = { fg = colors.bg0, bg = colors.fg1, reverse = config.invert_tabline },
    TabLine = { link = 'TabLineFill' },
    MatchParen = { bg = colors.bg3, bold = config.bold },
    ColorColumn = { bg = colors.dark_blue },
    Conceal = { fg = colors.blue },
    CursorLineNr = { fg = colors.yellow, bg = colors.bg1 },
    NonText = { link = 'LFlopsBg2' },
    SpecialKey = { link = 'LFlopsFg4' },
    Visual = { bg = colors.bg3, reverse = config.invert_selection },
    VisualNOS = { link = 'Visual' },
    Search = { fg = colors.yellow, bg = colors.bg0, reverse = config.inverse },
    IncSearch = { fg = colors.orange, bg = colors.bg0, reverse = config.inverse },
    CurSearch = { link = 'IncSearch' },
    QuickFixLine = { link = 'LFlopsPurple' },
    Underlined = { fg = colors.blue, underline = config.underline },
    StatusLine = { fg = colors.bg2, bg = colors.fg1, reverse = config.inverse },
    StatusLineNC = { fg = colors.bg1, bg = colors.fg4, reverse = config.inverse },
    WinBar = { fg = colors.fg4, bg = colors.bg0 },
    WinBarNC = { fg = colors.fg3, bg = colors.bg1 },
    WinSeparator = config.transparent_mode and { fg = colors.neutral_purple, bg = nil }
        or { fg = colors.neutral_purple, bg = colors.bg0 },
    WildMenu = { fg = colors.blue, bg = colors.bg2, bold = config.bold },
    Directory = { link = 'LFlopsBlueBold' },
    Title = { link = 'LFlopsGreenBold' },
    ErrorMsg = { fg = colors.bg0, bg = colors.red, bold = config.bold },
    MoreMsg = { link = 'LFlopsYellowBold' },
    ModeMsg = { link = 'LFlopsYellowBold' },
    Question = { link = 'LFlopsOrangeBold' },
    WarningMsg = { link = 'LFlopsRedBold' },
    LineNr = { fg = colors.neutral_purple },
    SignColumn = config.transparent_mode and { bg = nil } or { bg = colors.bg1 },
    Folded = { fg = colors.dark_blue, bg = colors.bg1, italic = config.italic.folds },
    FoldColumn = config.transparent_mode and { fg = colors.dark_blue, bg = nil }
        or { fg = colors.dark_blue, bg = colors.bg1 },
    Cursor = { reverse = config.inverse },
    vCursor = { link = 'Cursor' },
    iCursor = { link = 'Cursor' },
    lCursor = { link = 'Cursor' },
    Special = { link = 'LFlopsOrange' },
    Comment = { fg = colors.dark_blue, italic = config.italic.comments },
    Todo = { fg = colors.bg0, bg = colors.yellow, bold = config.bold, italic = config.italic.comments },
    Done = { fg = colors.orange, bold = config.bold, italic = config.italic.comments },
    Error = { fg = colors.red, bold = config.bold, reverse = config.inverse },
    Statement = { link = 'LFlopsRed' },
    Conditional = { link = 'LFlopsRed' },
    Repeat = { link = 'LFlopsRed' },
    Label = { link = 'LFlopsRed' },
    Exception = { link = 'LFlopsRed' },
    Operator = { fg = colors.orange, italic = config.italic.operators },
    Keyword = { link = 'LFlopsRed' },
    Identifier = { link = 'LFlopsBlue' },
    Function = { link = 'LFlopsGreenBold' },
    PreProc = { link = 'LFlopsAqua' },
    Include = { link = 'LFlopsAqua' },
    Define = { link = 'LFlopsAqua' },
    Macro = { link = 'LFlopsAqua' },
    PreCondit = { link = 'LFlopsAqua' },
    Constant = { link = 'LFlopsPurple' },
    Character = { link = 'LFlopsPurple' },
    String = { fg = colors.green, italic = config.italic.strings },
    Boolean = { link = 'LFlopsPurple' },
    Number = { link = 'LFlopsPurple' },
    Float = { link = 'LFlopsPurple' },
    Type = { link = 'LFlopsYellow' },
    StorageClass = { link = 'LFlopsOrange' },
    Structure = { link = 'LFlopsAqua' },
    Typedef = { link = 'LFlopsYellow' },
    Pmenu = { fg = colors.fg1, bg = colors.bg2 },
    PmenuSel = { fg = colors.bg2, bg = colors.blue, bold = config.bold },
    PmenuSbar = { bg = colors.bg2 },
    PmenuThumb = { bg = colors.bg4 },
    DiffDelete = { bg = colors.dark_red },
    DiffAdd = { bg = colors.dark_green },
    DiffChange = { bg = colors.dark_aqua },
    DiffText = { bg = colors.yellow, fg = colors.bg0 },
    SpellCap = { link = 'LFlopsBlueUnderline' },
    SpellBad = { link = 'LFlopsRedUnderline' },
    SpellLocal = { link = 'LFlopsAquaUnderline' },
    SpellRare = { link = 'LFlopsPurpleUnderline' },
    Whitespace = { fg = colors.bg2 },
    DiagnosticError = { link = 'LFlopsRed' },
    DiagnosticSignError = { link = 'LFlopsRedSign' },
    DiagnosticUnderlineError = { link = 'LFlopsRedUnderline' },
    DiagnosticWarn = { link = 'LFlopsYellow' },
    DiagnosticSignWarn = { link = 'LFlopsYellowSign' },
    DiagnosticUnderlineWarn = { link = 'LFlopsYellowUnderline' },
    DiagnosticInfo = { link = 'LFlopsBlue' },
    DiagnosticSignInfo = { link = 'LFlopsBlueSign' },
    DiagnosticUnderlineInfo = { link = 'LFlopsBlueUnderline' },
    DiagnosticHint = { link = 'LFlopsAqua' },
    DiagnosticSignHint = { link = 'LFlopsAquaSign' },
    DiagnosticUnderlineHint = { link = 'LFlopsAquaUnderline' },
    DiagnosticFloatingError = { link = 'LFlopsRed' },
    DiagnosticFloatingWarn = { link = 'LFlopsOrange' },
    DiagnosticFloatingInfo = { link = 'LFlopsBlue' },
    DiagnosticFloatingHint = { link = 'LFlopsAqua' },
    DiagnosticVirtualTextError = { link = 'LFlopsRed' },
    DiagnosticVirtualTextWarn = { link = 'LFlopsYellow' },
    DiagnosticVirtualTextInfo = { link = 'LFlopsBlue' },
    DiagnosticVirtualTextHint = { link = 'LFlopsAqua' },
    DiagnosticOk = { link = 'LFlopsGreenSign' },
    LspReferenceRead = { link = 'LFlopsYellowBold' },
    LspReferenceText = { link = 'LFlopsYellowBold' },
    LspReferenceWrite = { link = 'LFlopsOrangeBold' },
    LspCodeLens = { link = 'LFlopsGray' },
    LspSignatureActiveParameter = { link = 'Search' },
    gitcommitSelectedFile = { link = 'LFlopsGreen' },
    gitcommitDiscardedFile = { link = 'LFlopsRed' },
    GitSignsAdd = { link = 'LFlopsGreen' },
    GitSignsChange = { link = 'LFlopsAqua' },
    GitSignsDelete = { link = 'LFlopsRed' },
    NvimTreeSymlink = { fg = colors.neutral_aqua },
    NvimTreeRootFolder = { fg = colors.neutral_purple, bold = true },
    NvimTreeFolderIcon = { fg = colors.neutral_blue, bold = true },
    NvimTreeFileIcon = { fg = colors.light2 },
    NvimTreeExecFile = { fg = colors.neutral_green, bold = true },
    NvimTreeOpenedFile = { fg = colors.bright_red, bold = true },
    NvimTreeSpecialFile = { fg = colors.neutral_yellow, bold = true, underline = true },
    NvimTreeImageFile = { fg = colors.neutral_purple },
    NvimTreeIndentMarker = { fg = colors.dark3 },
    NvimTreeGitDirty = { fg = colors.neutral_yellow },
    NvimTreeGitStaged = { fg = colors.neutral_yellow },
    NvimTreeGitMerge = { fg = colors.neutral_purple },
    NvimTreeGitRenamed = { fg = colors.neutral_purple },
    NvimTreeGitNew = { fg = colors.neutral_yellow },
    NvimTreeGitDeleted = { fg = colors.neutral_red },
    NvimTreeWindowPicker = { bg = colors.aqua },
    debugPC = { link = 'DiffAdd' },
    debugBreakpoint = { link = 'LFlopsRedSign' },
    StartifyBracket = { link = 'LFlopsFg3' },
    StartifyFile = { link = 'LFlopsFg1' },
    StartifyNumber = { link = 'LFlopsBlue' },
    StartifyPath = { link = 'LFlopsGray' },
    StartifySlash = { link = 'LFlopsGray' },
    StartifySection = { link = 'LFlopsYellow' },
    StartifySpecial = { link = 'LFlopsBg2' },
    StartifyHeader = { link = 'LFlopsOrange' },
    StartifyFooter = { link = 'LFlopsBg2' },
    StartifyVar = { link = 'StartifyPath' },
    StartifySelect = { link = 'Title' },
    DirvishPathTail = { link = 'LFlopsAqua' },
    DirvishArg = { link = 'LFlopsYellow' },
    netrwDir = { link = 'LFlopsAqua' },
    netrwClassify = { link = 'LFlopsAqua' },
    netrwLink = { link = 'LFlopsGray' },
    netrwSymLink = { link = 'LFlopsFg1' },
    netrwExe = { link = 'LFlopsYellow' },
    netrwComment = { link = 'LFlopsGray' },
    netrwList = { link = 'LFlopsBlue' },
    netrwHelpCmd = { link = 'LFlopsAqua' },
    netrwCmdSep = { link = 'LFlopsFg3' },
    netrwVersion = { link = 'LFlopsGreen' },
    NERDTreeDir = { link = 'LFlopsAqua' },
    NERDTreeDirSlash = { link = 'LFlopsAqua' },
    NERDTreeOpenable = { link = 'LFlopsOrange' },
    NERDTreeClosable = { link = 'LFlopsOrange' },
    NERDTreeFile = { link = 'LFlopsFg1' },
    NERDTreeExecFile = { link = 'LFlopsYellow' },
    NERDTreeUp = { link = 'LFlopsGray' },
    NERDTreeCWD = { link = 'LFlopsGreen' },
    NERDTreeHelp = { link = 'LFlopsFg1' },
    NERDTreeToggleOn = { link = 'LFlopsGreen' },
    NERDTreeToggleOff = { link = 'LFlopsRed' },
    CocErrorSign = { link = 'LFlopsRedSign' },
    CocWarningSign = { link = 'LFlopsOrangeSign' },
    CocInfoSign = { link = 'LFlopsBlueSign' },
    CocHintSign = { link = 'LFlopsAquaSign' },
    CocErrorFloat = { link = 'LFlopsRed' },
    CocWarningFloat = { link = 'LFlopsOrange' },
    CocInfoFloat = { link = 'LFlopsBlue' },
    CocHintFloat = { link = 'LFlopsAqua' },
    CocDiagnosticsError = { link = 'LFlopsRed' },
    CocDiagnosticsWarning = { link = 'LFlopsOrange' },
    CocDiagnosticsInfo = { link = 'LFlopsBlue' },
    CocDiagnosticsHint = { link = 'LFlopsAqua' },
    CocSelectedText = { link = 'LFlopsRed' },
    CocMenuSel = { link = 'PmenuSel' },
    CocCodeLens = { link = 'LFlopsGray' },
    CocErrorHighlight = { link = 'LFlopsRedUnderline' },
    CocWarningHighlight = { link = 'LFlopsOrangeUnderline' },
    CocInfoHighlight = { link = 'LFlopsBlueUnderline' },
    CocHintHighlight = { link = 'LFlopsAquaUnderline' },
    TelescopeNormal = { link = 'LFlopsFg1' },
    TelescopeSelection = { link = 'LFlopsOrangeBold' },
    TelescopeSelectionCaret = { link = 'LFlopsRed' },
    TelescopeMultiSelection = { link = 'LFlopsGray' },
    TelescopeBorder = { link = 'TelescopeNormal' },
    TelescopePromptBorder = { link = 'TelescopeNormal' },
    TelescopeResultsBorder = { link = 'TelescopeNormal' },
    TelescopePreviewBorder = { link = 'TelescopeNormal' },
    TelescopeMatching = { link = 'LFlopsBlue' },
    TelescopePromptPrefix = { link = 'LFlopsRed' },
    TelescopePrompt = { link = 'TelescopeNormal' },
    CmpItemAbbr = { link = 'LFlopsFg0' },
    CmpItemAbbrDeprecated = { link = 'LFlopsFg1' },
    CmpItemAbbrMatch = { link = 'LFlopsBlueBold' },
    CmpItemAbbrMatchFuzzy = { link = 'LFlopsBlueUnderline' },
    CmpItemMenu = { link = 'LFlopsGray' },
    CmpItemKindText = { link = 'LFlopsOrange' },
    CmpItemKindVariable = { link = 'LFlopsOrange' },
    CmpItemKindMethod = { link = 'LFlopsBlue' },
    CmpItemKindFunction = { link = 'LFlopsBlue' },
    CmpItemKindConstructor = { link = 'LFlopsYellow' },
    CmpItemKindUnit = { link = 'LFlopsBlue' },
    CmpItemKindField = { link = 'LFlopsBlue' },
    CmpItemKindClass = { link = 'LFlopsYellow' },
    CmpItemKindInterface = { link = 'LFlopsYellow' },
    CmpItemKindModule = { link = 'LFlopsBlue' },
    CmpItemKindProperty = { link = 'LFlopsBlue' },
    CmpItemKindValue = { link = 'LFlopsOrange' },
    CmpItemKindEnum = { link = 'LFlopsYellow' },
    CmpItemKindOperator = { link = 'LFlopsYellow' },
    CmpItemKindKeyword = { link = 'LFlopsPurple' },
    CmpItemKindEvent = { link = 'LFlopsPurple' },
    CmpItemKindReference = { link = 'LFlopsPurple' },
    CmpItemKindColor = { link = 'LFlopsPurple' },
    CmpItemKindSnippet = { link = 'LFlopsGreen' },
    CmpItemKindFile = { link = 'LFlopsBlue' },
    CmpItemKindFolder = { link = 'LFlopsBlue' },
    CmpItemKindEnumMember = { link = 'LFlopsAqua' },
    CmpItemKindConstant = { link = 'LFlopsOrange' },
    CmpItemKindStruct = { link = 'LFlopsYellow' },
    CmpItemKindTypeParameter = { link = 'LFlopsYellow' },
    diffAdded = { link = 'DiffAdd' },
    diffRemoved = { link = 'DiffDelete' },
    diffChanged = { link = 'DiffChange' },
    diffFile = { link = 'LFlopsOrange' },
    diffNewFile = { link = 'LFlopsYellow' },
    diffOldFile = { link = 'LFlopsOrange' },
    diffLine = { link = 'LFlopsBlue' },
    diffIndexLine = { link = 'diffChanged' },
    NavicIconsFile = { link = 'LFlopsBlue' },
    NavicIconsModule = { link = 'LFlopsOrange' },
    NavicIconsNamespace = { link = 'LFlopsBlue' },
    NavicIconsPackage = { link = 'LFlopsAqua' },
    NavicIconsClass = { link = 'LFlopsYellow' },
    NavicIconsMethod = { link = 'LFlopsBlue' },
    NavicIconsProperty = { link = 'LFlopsAqua' },
    NavicIconsField = { link = 'LFlopsPurple' },
    NavicIconsConstructor = { link = 'LFlopsBlue' },
    NavicIconsEnum = { link = 'LFlopsPurple' },
    NavicIconsInterface = { link = 'LFlopsGreen' },
    NavicIconsFunction = { link = 'LFlopsBlue' },
    NavicIconsVariable = { link = 'LFlopsPurple' },
    NavicIconsConstant = { link = 'LFlopsOrange' },
    NavicIconsString = { link = 'LFlopsGreen' },
    NavicIconsNumber = { link = 'LFlopsOrange' },
    NavicIconsBoolean = { link = 'LFlopsOrange' },
    NavicIconsArray = { link = 'LFlopsOrange' },
    NavicIconsObject = { link = 'LFlopsOrange' },
    NavicIconsKey = { link = 'LFlopsAqua' },
    NavicIconsNull = { link = 'LFlopsOrange' },
    NavicIconsEnumMember = { link = 'LFlopsYellow' },
    NavicIconsStruct = { link = 'LFlopsPurple' },
    NavicIconsEvent = { link = 'LFlopsYellow' },
    NavicIconsOperator = { link = 'LFlopsRed' },
    NavicIconsTypeParameter = { link = 'LFlopsRed' },
    NavicText = { link = 'LFlopsWhite' },
    NavicSeparator = { link = 'LFlopsWhite' },
    htmlTag = { link = 'LFlopsAquaBold' },
    htmlEndTag = { link = 'LFlopsAquaBold' },
    htmlTagName = { link = 'LFlopsBlue' },
    htmlArg = { link = 'LFlopsOrange' },
    htmlTagN = { link = 'LFlopsFg1' },
    htmlSpecialTagName = { link = 'LFlopsBlue' },
    htmlLink = { fg = colors.fg4, underline = config.underline },
    htmlSpecialChar = { link = 'LFlopsRed' },
    htmlBold = { fg = colors.fg0, bg = colors.bg0, bold = config.bold },
    htmlBoldUnderline = { fg = colors.fg0, bg = colors.bg0, bold = config.bold, underline = config.underline },
    htmlBoldItalic = { fg = colors.fg0, bg = colors.bg0, bold = config.bold, italic = true },
    htmlBoldUnderlineItalic = {
      fg = colors.fg0,
      bg = colors.bg0,
      bold = config.bold,
      italic = true,
      underline = config.underline,
    },
    htmlUnderline = { fg = colors.fg0, bg = colors.bg0, underline = config.underline },
    htmlUnderlineItalic = {
      fg = colors.fg0,
      bg = colors.bg0,
      italic = true,
      underline = config.underline,
    },
    htmlItalic = { fg = colors.fg0, bg = colors.bg0, italic = true },
    xmlTag = { link = 'LFlopsAquaBold' },
    xmlEndTag = { link = 'LFlopsAquaBold' },
    xmlTagName = { link = 'LFlopsBlue' },
    xmlEqual = { link = 'LFlopsBlue' },
    docbkKeyword = { link = 'LFlopsAquaBold' },
    xmlDocTypeDecl = { link = 'LFlopsGray' },
    xmlDocTypeKeyword = { link = 'LFlopsPurple' },
    xmlCdataStart = { link = 'LFlopsGray' },
    xmlCdataCdata = { link = 'LFlopsPurple' },
    dtdFunction = { link = 'LFlopsGray' },
    dtdTagName = { link = 'LFlopsPurple' },
    xmlAttrib = { link = 'LFlopsOrange' },
    xmlProcessingDelim = { link = 'LFlopsGray' },
    dtdParamEntityPunct = { link = 'LFlopsGray' },
    dtdParamEntityDPunct = { link = 'LFlopsGray' },
    xmlAttribPunct = { link = 'LFlopsGray' },
    xmlEntity = { link = 'LFlopsRed' },
    xmlEntityPunct = { link = 'LFlopsRed' },
    clojureKeyword = { link = 'LFlopsBlue' },
    clojureCond = { link = 'LFlopsOrange' },
    clojureSpecial = { link = 'LFlopsOrange' },
    clojureDefine = { link = 'LFlopsOrange' },
    clojureFunc = { link = 'LFlopsYellow' },
    clojureRepeat = { link = 'LFlopsYellow' },
    clojureCharacter = { link = 'LFlopsAqua' },
    clojureStringEscape = { link = 'LFlopsAqua' },
    clojureException = { link = 'LFlopsRed' },
    clojureRegexp = { link = 'LFlopsAqua' },
    clojureRegexpEscape = { link = 'LFlopsAqua' },
    clojureRegexpCharClass = { fg = colors.fg3, bold = config.bold },
    clojureRegexpMod = { link = 'clojureRegexpCharClass' },
    clojureRegexpQuantifier = { link = 'clojureRegexpCharClass' },
    clojureParen = { link = 'LFlopsFg3' },
    clojureAnonArg = { link = 'LFlopsYellow' },
    clojureVariable = { link = 'LFlopsBlue' },
    clojureMacro = { link = 'LFlopsOrange' },
    clojureMeta = { link = 'LFlopsYellow' },
    clojureDeref = { link = 'LFlopsYellow' },
    clojureQuote = { link = 'LFlopsYellow' },
    clojureUnquote = { link = 'LFlopsYellow' },
    cOperator = { link = 'LFlopsPurple' },
    cppOperator = { link = 'LFlopsPurple' },
    cStructure = { link = 'LFlopsOrange' },
    pythonBuiltin = { link = 'LFlopsOrange' },
    pythonBuiltinObj = { link = 'LFlopsOrange' },
    pythonBuiltinFunc = { link = 'LFlopsOrange' },
    pythonFunction = { link = 'LFlopsAqua' },
    pythonDecorator = { link = 'LFlopsRed' },
    pythonInclude = { link = 'LFlopsBlue' },
    pythonImport = { link = 'LFlopsBlue' },
    pythonRun = { link = 'LFlopsBlue' },
    pythonCoding = { link = 'LFlopsBlue' },
    pythonOperator = { link = 'LFlopsRed' },
    pythonException = { link = 'LFlopsRed' },
    pythonExceptions = { link = 'LFlopsPurple' },
    pythonBoolean = { link = 'LFlopsPurple' },
    pythonDot = { link = 'LFlopsFg3' },
    pythonConditional = { link = 'LFlopsRed' },
    pythonRepeat = { link = 'LFlopsRed' },
    pythonDottedName = { link = 'LFlopsGreenBold' },
    cssBraces = { link = 'LFlopsBlue' },
    cssFunctionName = { link = 'LFlopsYellow' },
    cssIdentifier = { link = 'LFlopsOrange' },
    cssClassName = { link = 'LFlopsGreen' },
    cssColor = { link = 'LFlopsBlue' },
    cssSelectorOp = { link = 'LFlopsBlue' },
    cssSelectorOp2 = { link = 'LFlopsBlue' },
    cssImportant = { link = 'LFlopsGreen' },
    cssVendor = { link = 'LFlopsFg1' },
    cssTextProp = { link = 'LFlopsAqua' },
    cssAnimationProp = { link = 'LFlopsAqua' },
    cssUIProp = { link = 'LFlopsYellow' },
    cssTransformProp = { link = 'LFlopsAqua' },
    cssTransitionProp = { link = 'LFlopsAqua' },
    cssPrintProp = { link = 'LFlopsAqua' },
    cssPositioningProp = { link = 'LFlopsYellow' },
    cssBoxProp = { link = 'LFlopsAqua' },
    cssFontDescriptorProp = { link = 'LFlopsAqua' },
    cssFlexibleBoxProp = { link = 'LFlopsAqua' },
    cssBorderOutlineProp = { link = 'LFlopsAqua' },
    cssBackgroundProp = { link = 'LFlopsAqua' },
    cssMarginProp = { link = 'LFlopsAqua' },
    cssListProp = { link = 'LFlopsAqua' },
    cssTableProp = { link = 'LFlopsAqua' },
    cssFontProp = { link = 'LFlopsAqua' },
    cssPaddingProp = { link = 'LFlopsAqua' },
    cssDimensionProp = { link = 'LFlopsAqua' },
    cssRenderProp = { link = 'LFlopsAqua' },
    cssColorProp = { link = 'LFlopsAqua' },
    cssGeneratedContentProp = { link = 'LFlopsAqua' },
    javaScriptBraces = { link = 'LFlopsFg1' },
    javaScriptFunction = { link = 'LFlopsAqua' },
    javaScriptIdentifier = { link = 'LFlopsRed' },
    javaScriptMember = { link = 'LFlopsBlue' },
    javaScriptNumber = { link = 'LFlopsPurple' },
    javaScriptNull = { link = 'LFlopsPurple' },
    javaScriptParens = { link = 'LFlopsFg3' },
    typescriptReserved = { link = 'LFlopsAqua' },
    typescriptLabel = { link = 'LFlopsAqua' },
    typescriptFuncKeyword = { link = 'LFlopsAqua' },
    typescriptIdentifier = { link = 'LFlopsOrange' },
    typescriptBraces = { link = 'LFlopsFg1' },
    typescriptEndColons = { link = 'LFlopsFg1' },
    typescriptDOMObjects = { link = 'LFlopsFg1' },
    typescriptAjaxMethods = { link = 'LFlopsFg1' },
    typescriptLogicSymbols = { link = 'LFlopsFg1' },
    typescriptDocSeeTag = { link = 'Comment' },
    typescriptDocParam = { link = 'Comment' },
    typescriptDocTags = { link = 'vimCommentTitle' },
    typescriptGlobalObjects = { link = 'LFlopsFg1' },
    typescriptParens = { link = 'LFlopsFg3' },
    typescriptOpSymbols = { link = 'LFlopsFg3' },
    typescriptHtmlElemProperties = { link = 'LFlopsFg1' },
    typescriptNull = { link = 'LFlopsPurple' },
    typescriptInterpolationDelimiter = { link = 'LFlopsAqua' },
    purescriptModuleKeyword = { link = 'LFlopsAqua' },
    purescriptModuleName = { link = 'LFlopsFg1' },
    purescriptWhere = { link = 'LFlopsAqua' },
    purescriptDelimiter = { link = 'LFlopsFg4' },
    purescriptType = { link = 'LFlopsFg1' },
    purescriptImportKeyword = { link = 'LFlopsAqua' },
    purescriptHidingKeyword = { link = 'LFlopsAqua' },
    purescriptAsKeyword = { link = 'LFlopsAqua' },
    purescriptStructure = { link = 'LFlopsAqua' },
    purescriptOperator = { link = 'LFlopsBlue' },
    purescriptTypeVar = { link = 'LFlopsFg1' },
    purescriptConstructor = { link = 'LFlopsFg1' },
    purescriptFunction = { link = 'LFlopsFg1' },
    purescriptConditional = { link = 'LFlopsOrange' },
    purescriptBacktick = { link = 'LFlopsOrange' },
    coffeeExtendedOp = { link = 'LFlopsFg3' },
    coffeeSpecialOp = { link = 'LFlopsFg3' },
    coffeeCurly = { link = 'LFlopsOrange' },
    coffeeParen = { link = 'LFlopsFg3' },
    coffeeBracket = { link = 'LFlopsOrange' },
    rubyStringDelimiter = { link = 'LFlopsGreen' },
    rubyInterpolationDelimiter = { link = 'LFlopsAqua' },
    rubyDefinedOperator = { link = 'rubyKeyword' },
    objcTypeModifier = { link = 'LFlopsRed' },
    objcDirective = { link = 'LFlopsBlue' },
    goDirective = { link = 'LFlopsAqua' },
    goConstants = { link = 'LFlopsPurple' },
    goDeclaration = { link = 'LFlopsRed' },
    goDeclType = { link = 'LFlopsBlue' },
    goBuiltins = { link = 'LFlopsOrange' },
    luaIn = { link = 'LFlopsRed' },
    luaFunction = { link = 'LFlopsAqua' },
    luaTable = { link = 'LFlopsOrange' },
    moonSpecialOp = { link = 'LFlopsFg3' },
    moonExtendedOp = { link = 'LFlopsFg3' },
    moonFunction = { link = 'LFlopsFg3' },
    moonObject = { link = 'LFlopsYellow' },
    javaAnnotation = { link = 'LFlopsBlue' },
    javaDocTags = { link = 'LFlopsAqua' },
    javaCommentTitle = { link = 'vimCommentTitle' },
    javaParen = { link = 'LFlopsFg3' },
    javaParen1 = { link = 'LFlopsFg3' },
    javaParen2 = { link = 'LFlopsFg3' },
    javaParen3 = { link = 'LFlopsFg3' },
    javaParen4 = { link = 'LFlopsFg3' },
    javaParen5 = { link = 'LFlopsFg3' },
    javaOperator = { link = 'LFlopsOrange' },
    javaVarArg = { link = 'LFlopsGreen' },
    elixirDocString = { link = 'Comment' },
    elixirStringDelimiter = { link = 'LFlopsGreen' },
    elixirInterpolationDelimiter = { link = 'LFlopsAqua' },
    elixirModuleDeclaration = { link = 'LFlopsYellow' },
    scalaNameDefinition = { link = 'LFlopsFg1' },
    scalaCaseFollowing = { link = 'LFlopsFg1' },
    scalaCapitalWord = { link = 'LFlopsFg1' },
    scalaTypeExtension = { link = 'LFlopsFg1' },
    scalaKeyword = { link = 'LFlopsRed' },
    scalaKeywordModifier = { link = 'LFlopsRed' },
    scalaSpecial = { link = 'LFlopsAqua' },
    scalaOperator = { link = 'LFlopsFg1' },
    scalaTypeDeclaration = { link = 'LFlopsYellow' },
    scalaTypeTypePostDeclaration = { link = 'LFlopsYellow' },
    scalaInstanceDeclaration = { link = 'LFlopsFg1' },
    scalaInterpolation = { link = 'LFlopsAqua' },
    markdownItalic = { fg = colors.fg3, italic = true },
    markdownBold = { fg = colors.fg3, bold = config.bold },
    markdownBoldItalic = { fg = colors.fg3, bold = config.bold, italic = true },
    markdownH1 = { link = 'LFlopsGreenBold' },
    markdownH2 = { link = 'LFlopsGreenBold' },
    markdownH3 = { link = 'LFlopsYellowBold' },
    markdownH4 = { link = 'LFlopsYellowBold' },
    markdownH5 = { link = 'LFlopsYellow' },
    markdownH6 = { link = 'LFlopsYellow' },
    markdownCode = { link = 'LFlopsAqua' },
    markdownCodeBlock = { link = 'LFlopsAqua' },
    markdownCodeDelimiter = { link = 'LFlopsAqua' },
    markdownBlockquote = { link = 'LFlopsGray' },
    markdownListMarker = { link = 'LFlopsGray' },
    markdownOrderedListMarker = { link = 'LFlopsGray' },
    markdownRule = { link = 'LFlopsGray' },
    markdownHeadingRule = { link = 'LFlopsGray' },
    markdownUrlDelimiter = { link = 'LFlopsFg3' },
    markdownLinkDelimiter = { link = 'LFlopsFg3' },
    markdownLinkTextDelimiter = { link = 'LFlopsFg3' },
    markdownHeadingDelimiter = { link = 'LFlopsOrange' },
    markdownUrl = { link = 'LFlopsPurple' },
    markdownUrlTitleDelimiter = { link = 'LFlopsGreen' },
    markdownLinkText = { fg = colors.dark_blue, underline = config.underline },
    markdownIdDeclaration = { link = 'markdownLinkText' },
    haskellType = { link = 'LFlopsBlue' },
    haskellIdentifier = { link = 'LFlopsAqua' },
    haskellSeparator = { link = 'LFlopsFg4' },
    haskellDelimiter = { link = 'LFlopsOrange' },
    haskellOperators = { link = 'LFlopsPurple' },
    haskellBacktick = { link = 'LFlopsOrange' },
    haskellStatement = { link = 'LFlopsPurple' },
    haskellConditional = { link = 'LFlopsPurple' },
    haskellLet = { link = 'LFlopsRed' },
    haskellDefault = { link = 'LFlopsRed' },
    haskellWhere = { link = 'LFlopsRed' },
    haskellBottom = { link = 'LFlopsRedBold' },
    haskellImportKeywords = { link = 'LFlopsPurpleBold' },
    haskellDeclKeyword = { link = 'LFlopsOrange' },
    haskellDecl = { link = 'LFlopsOrange' },
    haskellDeriving = { link = 'LFlopsPurple' },
    haskellAssocType = { link = 'LFlopsAqua' },
    haskellNumber = { link = 'LFlopsAqua' },
    haskellPragma = { link = 'LFlopsRedBold' },
    haskellTH = { link = 'LFlopsAquaBold' },
    haskellForeignKeywords = { link = 'LFlopsGreen' },
    haskellKeyword = { link = 'LFlopsRed' },
    haskellFloat = { link = 'LFlopsAqua' },
    haskellInfix = { link = 'LFlopsPurple' },
    haskellQuote = { link = 'LFlopsGreenBold' },
    haskellShebang = { link = 'LFlopsYellowBold' },
    haskellLiquid = { link = 'LFlopsPurpleBold' },
    haskellQuasiQuoted = { link = 'LFlopsBlueBold' },
    haskellRecursiveDo = { link = 'LFlopsPurple' },
    haskellQuotedType = { link = 'LFlopsRed' },
    haskellPreProc = { link = 'LFlopsFg4' },
    haskellTypeRoles = { link = 'LFlopsRedBold' },
    haskellTypeForall = { link = 'LFlopsRed' },
    haskellPatternKeyword = { link = 'LFlopsBlue' },
    jsonKeyword = { link = 'LFlopsGreen' },
    jsonQuote = { link = 'LFlopsGreen' },
    jsonBraces = { link = 'LFlopsFg1' },
    jsonString = { link = 'LFlopsFg1' },
    mailQuoted1 = { link = 'LFlopsAqua' },
    mailQuoted2 = { link = 'LFlopsPurple' },
    mailQuoted3 = { link = 'LFlopsYellow' },
    mailQuoted4 = { link = 'LFlopsGreen' },
    mailQuoted5 = { link = 'LFlopsRed' },
    mailQuoted6 = { link = 'LFlopsOrange' },
    mailSignature = { link = 'Comment' },
    csBraces = { link = 'LFlopsFg1' },
    csEndColon = { link = 'LFlopsFg1' },
    csLogicSymbols = { link = 'LFlopsFg1' },
    csParens = { link = 'LFlopsFg3' },
    csOpSymbols = { link = 'LFlopsFg3' },
    csInterpolationDelimiter = { link = 'LFlopsFg3' },
    csInterpolationAlignDel = { link = 'LFlopsAquaBold' },
    csInterpolationFormat = { link = 'LFlopsAqua' },
    csInterpolationFormatDel = { link = 'LFlopsAquaBold' },
    rustSigil = { link = 'LFlopsOrange' },
    rustEscape = { link = 'LFlopsAqua' },
    rustStringContinuation = { link = 'LFlopsAqua' },
    rustEnum = { link = 'LFlopsAqua' },
    rustStructure = { link = 'LFlopsAqua' },
    rustModPathSep = { link = 'LFlopsFg2' },
    rustCommentLineDoc = { link = 'Comment' },
    rustDefault = { link = 'LFlopsAqua' },
    ocamlOperator = { link = 'LFlopsFg1' },
    ocamlKeyChar = { link = 'LFlopsOrange' },
    ocamlArrow = { link = 'LFlopsOrange' },
    ocamlInfixOpKeyword = { link = 'LFlopsRed' },
    ocamlConstructor = { link = 'LFlopsOrange' },
    LspSagaCodeActionTitle = { link = 'Title' },
    LspSagaCodeActionBorder = { link = 'LFlopsFg1' },
    LspSagaCodeActionContent = { fg = colors.green, bold = config.bold },
    LspSagaLspFinderBorder = { link = 'LFlopsFg1' },
    LspSagaAutoPreview = { link = 'LFlopsOrange' },
    TargetWord = { fg = colors.blue, bold = config.bold },
    FinderSeparator = { link = 'LFlopsAqua' },
    LspSagaDefPreviewBorder = { link = 'LFlopsBlue' },
    LspSagaHoverBorder = { link = 'LFlopsOrange' },
    LspSagaRenameBorder = { link = 'LFlopsBlue' },
    LspSagaDiagnosticSource = { link = 'LFlopsOrange' },
    LspSagaDiagnosticBorder = { link = 'LFlopsPurple' },
    LspSagaDiagnosticHeader = { link = 'LFlopsGreen' },
    LspSagaSignatureHelpBorder = { link = 'LFlopsGreen' },
    SagaShadow = { link = 'LFlopsBg0' },
    DashboardShortCut = { link = 'LFlopsOrange' },
    DashboardHeader = { link = 'LFlopsAqua' },
    DashboardCenter = { link = 'LFlopsYellow' },
    DashboardFooter = { fg = colors.purple, italic = true },
    MasonHighlight = { link = 'LFlopsAqua' },
    MasonHighlightBlock = { fg = colors.bg0, bg = colors.blue },
    MasonHighlightBlockBold = { fg = colors.bg0, bg = colors.blue, bold = true },
    MasonHighlightSecondary = { fg = colors.yellow },
    MasonHighlightBlockSecondary = { fg = colors.bg0, bg = colors.yellow },
    MasonHighlightBlockBoldSecondary = { fg = colors.bg0, bg = colors.yellow, bold = true },
    MasonHeader = { link = 'MasonHighlightBlockBoldSecondary' },
    MasonHeaderSecondary = { link = 'MasonHighlightBlockBold' },
    MasonMuted = { fg = colors.fg4 },
    MasonMutedBlock = { fg = colors.bg0, bg = colors.fg4 },
    MasonMutedBlockBold = { fg = colors.bg0, bg = colors.fg4, bold = true },
    LspInlayHint = { link = 'comment' },
    CarbonFile = { link = 'LFlopsFg1' },
    CarbonExe = { link = 'LFlopsYellow' },
    CarbonSymlink = { link = 'LFlopsAqua' },
    CarbonBrokenSymlink = { link = 'LFlopsRed' },
    CarbonIndicator = { link = 'LFlopsGray' },
    CarbonDanger = { link = 'LFlopsRed' },
    CarbonPending = { link = 'LFlopsYellow' },
    NoiceCursor = { link = 'TermCursor' },
    NotifyDEBUGBorder = { link = 'LFlopsBlue' },
    NotifyDEBUGIcon = { link = 'LFlopsBlue' },
    NotifyDEBUGTitle = { link = 'LFlopsBlue' },
    NotifyERRORBorder = { link = 'LFlopsRed' },
    NotifyERRORIcon = { link = 'LFlopsRed' },
    NotifyERRORTitle = { link = 'LFlopsRed' },
    NotifyINFOBorder = { link = 'LFlopsAqua' },
    NotifyINFOIcon = { link = 'LFlopsAqua' },
    NotifyINFOTitle = { link = 'LFlopsAqua' },
    NotifyTRACEBorder = { link = 'LFlopsGreen' },
    NotifyTRACEIcon = { link = 'LFlopsGreen' },
    NotifyTRACETitle = { link = 'LFlopsGreen' },
    NotifyWARNBorder = { link = 'LFlopsYellow' },
    NotifyWARNIcon = { link = 'LFlopsYellow' },
    NotifyWARNTitle = { link = 'LFlopsYellow' },
    IlluminatedWordText = { link = 'LspReferenceText' },
    IlluminatedWordRead = { link = 'LspReferenceRead' },
    IlluminatedWordWrite = { link = 'LspReferenceWrite' },
    TSRainbowRed = { fg = colors.red },
    TSRainbowOrange = { fg = colors.orange },
    TSRainbowYellow = { fg = colors.yellow },
    TSRainbowGreen = { fg = colors.green },
    TSRainbowBlue = { fg = colors.blue },
    TSRainbowViolet = { fg = colors.purple },
    TSRainbowCyan = { fg = colors.cyan },
    DapBreakpointSymbol = { fg = colors.red, bg = colors.bg1 },
    DapStoppedSymbol = { fg = colors.green, bg = colors.bg1 },
    DapUIBreakpointsCurrentLine = { link = 'LFlopsYellow' },
    DapUIBreakpointsDisabledLine = { link = 'LFlopsGray' },
    DapUIBreakpointsInfo = { link = 'LFlopsAqua' },
    DapUIBreakpointsLine = { link = 'LFlopsYellow' },
    DapUIBreakpointsPath = { link = 'LFlopsBlue' },
    DapUICurrentFrameName = { link = 'LFlopsPurple' },
    DapUIDecoration = { link = 'LFlopsPurple' },
    DapUIEndofBuffer = { link = 'LFlopsBg2' },
    DapUIFloatBorder = { link = 'LFlopsAqua' },
    DapUILineNumber = { link = 'LFlopsYellow' },
    DapUIModifiedValue = { link = 'LFlopsRed' },
    DapUIPlayPause = { fg = colors.green, bg = colors.bg1 },
    DapUIRestart = { fg = colors.green, bg = colors.bg1 },
    DapUIScope = { link = 'LFlopsBlue' },
    DapUISource = { link = 'LFlopsFg1' },
    DapUIStepBack = { fg = colors.blue, bg = colors.bg1 },
    DapUIStepInto = { fg = colors.blue, bg = colors.bg1 },
    DapUIStepOut = { fg = colors.blue, bg = colors.bg1 },
    DapUIStepOver = { fg = colors.blue, bg = colors.bg1 },
    DapUIStop = { fg = colors.red, bg = colors.bg1 },
    DapUIStoppedThread = { link = 'LFlopsBlue' },
    DapUIThread = { link = 'LFlopsBlue' },
    DapUIType = { link = 'LFlopsOrange' },
    DapUIUnavailable = { link = 'LFlopsGray' },
    DapUIWatchesEmpty = { link = 'LFlopsGray' },
    DapUIWatchesError = { link = 'LFlopsRed' },
    DapUIWatchesValue = { link = 'LFlopsYellow' },
    DapUIWinSelect = { link = 'LFlopsYellow' },
    NeogitDiffDelete = { link = 'DiffDelete' },
    NeogitDiffAdd = { link = 'DiffAdd' },
    NeogitHunkHeader = { link = 'WinBar' },
    NeogitHunkHeaderHighlight = { link = 'WinBarNC' },
    DiffviewStatusModified = { link = 'LFlopsGreenBold' },
    DiffviewFilePanelInsertions = { link = 'LFlopsGreenBold' },
    DiffviewFilePanelDeletions = { link = 'LFlopsRedBold' },
    ['@comment'] = { link = 'Comment' },
    ['@none'] = { bg = 'NONE', fg = 'NONE' },
    ['@preproc'] = { link = 'PreProc' },
    ['@define'] = { link = 'Define' },
    ['@operator'] = { link = 'Operator' },
    ['@punctuation.delimiter'] = { link = 'Delimiter' },
    ['@punctuation.bracket'] = { link = 'Delimiter' },
    ['@punctuation.special'] = { link = 'Delimiter' },
    ['@string'] = { link = 'String' },
    ['@string.regex'] = { link = 'String' },
    ['@string.regexp'] = { link = 'String' },
    ['@string.escape'] = { link = 'SpecialChar' },
    ['@string.special'] = { link = 'SpecialChar' },
    ['@string.special.path'] = { link = 'Underlined' },
    ['@string.special.symbol'] = { link = 'Identifier' },
    ['@string.special.url'] = { link = 'Underlined' },
    ['@character'] = { link = 'Character' },
    ['@character.special'] = { link = 'SpecialChar' },
    ['@boolean'] = { link = 'Boolean' },
    ['@number'] = { link = 'Number' },
    ['@number.float'] = { link = 'Float' },
    ['@float'] = { link = 'Float' },
    ['@function'] = { link = 'Function' },
    ['@function.builtin'] = { link = 'Special' },
    ['@function.call'] = { link = 'Function' },
    ['@function.macro'] = { link = 'Macro' },
    ['@function.method'] = { link = 'Function' },
    ['@method'] = { link = 'Function' },
    ['@method.call'] = { link = 'Function' },
    ['@constructor'] = { link = 'Special' },
    ['@parameter'] = { link = 'Identifier' },
    ['@keyword'] = { link = 'Keyword' },
    ['@keyword.conditional'] = { link = 'Conditional' },
    ['@keyword.debug'] = { link = 'Debug' },
    ['@keyword.directive'] = { link = 'PreProc' },
    ['@keyword.directive.define'] = { link = 'Define' },
    ['@keyword.exception'] = { link = 'Exception' },
    ['@keyword.function'] = { link = 'Keyword' },
    ['@keyword.import'] = { link = 'Include' },
    ['@keyword.operator'] = { link = 'LFlopsRed' },
    ['@keyword.repeat'] = { link = 'Repeat' },
    ['@keyword.return'] = { link = 'Keyword' },
    ['@keyword.storage'] = { link = 'StorageClass' },
    ['@conditional'] = { link = 'Conditional' },
    ['@repeat'] = { link = 'Repeat' },
    ['@debug'] = { link = 'Debug' },
    ['@label'] = { link = 'Label' },
    ['@include'] = { link = 'Include' },
    ['@exception'] = { link = 'Exception' },
    ['@type'] = { link = 'Type' },
    ['@type.builtin'] = { link = 'Type' },
    ['@type.definition'] = { link = 'Typedef' },
    ['@type.qualifier'] = { link = 'Type' },
    ['@storageclass'] = { link = 'StorageClass' },
    ['@attribute'] = { link = 'PreProc' },
    ['@field'] = { link = 'Identifier' },
    ['@property'] = { link = 'Identifier' },
    ['@variable'] = { link = 'LFlopsFg1' },
    ['@variable.builtin'] = { link = 'Special' },
    ['@variable.member'] = { link = 'Identifier' },
    ['@variable.parameter'] = { link = 'Identifier' },
    ['@constant'] = { link = 'Constant' },
    ['@constant.builtin'] = { link = 'Special' },
    ['@constant.macro'] = { link = 'Define' },
    ['@markup'] = { link = 'LFlopsFg1' },
    ['@markup.strong'] = { bold = config.bold },
    ['@markup.emphasis'] = { italic = config.italic.emphasis },
    ['@markup.underline'] = { underline = config.underline },
    ['@markup.strikethrough'] = { strikethrough = config.strikethrough },
    ['@markup.heading'] = { link = 'Title' },
    ['@markup.raw'] = { link = 'String' },
    ['@markup.math'] = { link = 'Special' },
    ['@markup.environment'] = { link = 'Macro' },
    ['@markup.environment.name'] = { link = 'Type' },
    ['@markup.link'] = { link = 'Underlined' },
    ['@markup.link.label'] = { link = 'SpecialChar' },
    ['@markup.list'] = { link = 'Delimiter' },
    ['@markup.list.checked'] = { link = 'LFlopsGreen' },
    ['@markup.list.unchecked'] = { link = 'LFlopsGray' },
    ['@comment.todo'] = { link = 'Todo' },
    ['@comment.note'] = { link = 'SpecialComment' },
    ['@comment.warning'] = { link = 'WarningMsg' },
    ['@comment.error'] = { link = 'ErrorMsg' },
    ['@diff.plus'] = { link = 'diffAdded' },
    ['@diff.minus'] = { link = 'diffRemoved' },
    ['@diff.delta'] = { link = 'diffChanged' },
    ['@module'] = { link = 'LFlopsFg1' },
    ['@namespace'] = { link = 'LFlopsFg1' },
    ['@symbol'] = { link = 'Identifier' },
    ['@text'] = { link = 'LFlopsFg1' },
    ['@text.strong'] = { bold = config.bold },
    ['@text.emphasis'] = { italic = config.italic.emphasis },
    ['@text.underline'] = { underline = config.underline },
    ['@text.strike'] = { strikethrough = config.strikethrough },
    ['@text.title'] = { link = 'Title' },
    ['@text.literal'] = { link = 'String' },
    ['@text.uri'] = { link = 'Underlined' },
    ['@text.math'] = { link = 'Special' },
    ['@text.environment'] = { link = 'Macro' },
    ['@text.environment.name'] = { link = 'Type' },
    ['@text.reference'] = { link = 'Constant' },
    ['@text.todo'] = { link = 'Todo' },
    ['@text.todo.checked'] = { link = 'LFlopsGreen' },
    ['@text.todo.unchecked'] = { link = 'LFlopsGray' },
    ['@text.note'] = { link = 'SpecialComment' },
    ['@text.note.comment'] = { fg = colors.purple, bold = config.bold },
    ['@text.warning'] = { link = 'WarningMsg' },
    ['@text.danger'] = { link = 'ErrorMsg' },
    ['@text.danger.comment'] = { fg = colors.fg0, bg = colors.red, bold = config.bold },
    ['@text.diff.add'] = { link = 'diffAdded' },
    ['@text.diff.delete'] = { link = 'diffRemoved' },
    ['@tag'] = { link = 'Tag' },
    ['@tag.attribute'] = { link = 'Identifier' },
    ['@tag.delimiter'] = { link = 'Delimiter' },
    ['@punctuation'] = { link = 'Delimiter' },
    ['@macro'] = { link = 'Macro' },
    ['@structure'] = { link = 'Structure' },
    ['@lsp.type.class'] = { link = '@type' },
    ['@lsp.type.comment'] = { link = '@comment' },
    ['@lsp.type.decorator'] = { link = '@macro' },
    ['@lsp.type.enum'] = { link = '@type' },
    ['@lsp.type.enumMember'] = { link = '@constant' },
    ['@lsp.type.function'] = { link = '@function' },
    ['@lsp.type.interface'] = { link = '@constructor' },
    ['@lsp.type.macro'] = { link = '@macro' },
    ['@lsp.type.method'] = { link = '@method' },
    ['@lsp.type.namespace'] = { link = '@namespace' },
    ['@lsp.type.parameter'] = { link = '@parameter' },
    ['@lsp.type.property'] = { link = '@property' },
    ['@lsp.type.struct'] = { link = '@type' },
    ['@lsp.type.type'] = { link = '@type' },
    ['@lsp.type.typeParameter'] = { link = '@type.definition' },
    ['@lsp.type.variable'] = { link = '@variable' },
  }

  for group, hl in pairs(config.overrides) do
    if groups[group] then
      -- "link" should not mix with other configs (:h hi-link)
      groups[group].link = nil
    end

    groups[group] = vim.tbl_extend('force', groups[group] or {}, hl)
  end

  return groups
end

---@param config LFlopsConfig?
LFlops.setup = function(config)
  LFlops.config = vim.tbl_deep_extend('force', LFlops.config, config or {})
end

--- main load function
LFlops.load = function()
  if vim.version().minor < 8 then
    vim.notify_once('lflops.nvim: you must use neovim 0.8 or higher')
    return
  end

  -- reset colors
  if vim.g.colors_name then
    vim.cmd.hi('clear')
  end
  vim.g.colors_name = 'lflops'
  vim.o.termguicolors = true

  local groups = get_groups()

  -- add highlights
  for group, settings in pairs(groups) do
    vim.api.nvim_set_hl(0, group, settings)
  end
end

return LFlops
